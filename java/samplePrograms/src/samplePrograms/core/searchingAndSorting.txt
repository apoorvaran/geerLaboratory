1. Bubble sort

a[] is an array of size N
begin BubbleSort(a[])
 
declare integer i, j
for i = 0 to N - 1
   for j = 0 to N - i - 1
      if a[j] > a[j+1] then 
         swap a[j], a[j+1]
      end if
   end for
  return a
   
end BubbleSort

----------------------------------
2. Selection sort

a[] is an array of size N
begin SelectionSort(a[])
 
 for i = 0 to n - 1
   /* set current element as minimum*/
      min = i    
      /* find the minimum element */
       for j = i+1 to n 
         if list[j] < list[min] then
            min = j;
         end if
      end for
  /* swap the minimum element with the current element*/
      if min != i  then
         swap list[min], list[i]
      end if
   end for
     
end SelectionSort

----------------------------------
3. Insertion sort

a[] is an array of size N
begin InsertionSort(a[])
 
for i = 1 to N
   key = a[ i ]
   j = i - 1
   while ( j >= 0 and a[ j ] > key0
      a[ j+1 ] = x[ j ]
      j = j - 1
   end while
   a[ j+1 ] = key
end for
 
end InsertionSort

----------------------------------
4. Quick sort

QuickSort(A as array, low as int, high as int){
    if (low < high){
        pivot_location = Partition(A,low,high)
        Quicksort(A,low, pivot_location)
        Quicksort(A, pivot_location + 1, high)
    }
}
Partition(A as array, low as int, high as int){
     pivot = A[low]
     left = low
 
     for i = low + 1 to high{
         if (A[i] < pivot) then{
             swap(A[i], A[left + 1])
             left = left + 1
         }
     }
     swap(pivot,A[left])
 
    return (left)}

----------------------------------
5. Merge sort

procedure MergeSort( a as array )
   if ( n == 1 ) return a
 
   var l1 as array = a[0] ... a[n/2]
   var l2 as array = a[n/2+1] ... a[n]
 
   l1 = mergesort( l1 )
   l2 = mergesort( l2 )
 
   return merge( l1, l2 )
end procedure
 
procedure merge( a as array, b as array )
 
   var c as array
   while ( a and b have elements )
      if ( a[0] > b[0] )
         add b[0] to the end of c
         remove b[0] from b
      else
         add a[0] to the end of c
         remove a[0] from a
      end if
   end while
    
   while ( a has elements )
      add a[0] to the end of c
      remove a[0] from a
   end while
    
   while ( b has elements )
      add b[0] to the end of c
      remove b[0] from b
   end while
    
   return c
     
end procedure

----------------------------------
6. Heap sort

Heapsort(a as array)
 
for (i = n / 2 - 1) to i >= 0
        heapify(a, n, i); 
 
    for i = n-1 to 0
        swap(a[0], a[i])
        heapify(a, i, 0); 
    end for
end for
 
heapify(a as array, n as int, i as int)
    largest = i //Initialize largest as root 
    int l eft = 2*i + 1; // left = 2*i + 1 
    int right = 2*i + 2; // right = 2*i + 2 
 
    if (left < n) and (a[left] > a[largest])
        largest = left
 
    if (right < n) and (a[right] > a[largest])
        largest = right
 
    if (largest != i)
        swap(a[i], A[largest])
        Heapify(a, n, largest)
end heapify

----------------------------------
6. Binary Search

Procedure binary_search
   a; sorted array
   n; size of array
   x; value to be searched
 
    lowerBound = 1
    upperBound = n 
 
   while x not found
      if upperBound < lowerBound 
         EXIT: x does not exists.
    
      set midPoint = lowerBound + ( upperBound - lowerBound ) / 2
       
      if A[midPoint] < x set lowerBound = midPoint + 1 if A[midPoint] > x
         set upperBound = midPoint - 1
 
      if A[midPoint] = x 
         EXIT: x found at location midPoint
   end while
    
end procedure
